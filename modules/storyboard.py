import streamlit as st
from utils.ai_service import generate_academic_text

def render_storyboard(project_id, project_context, history_manager, adaptive_engine):
    """
    Affiche l'interface de storyboard pour un projet.
    
    Args:
        project_id: ID du projet
        project_context: Instance de ProjectContext
        history_manager: Instance de HistoryManager
        adaptive_engine: Instance de AdaptiveEngine
    """
    st.title("Storyboard")
    
    # Chargement des donn√©es du projet
    project = project_context.load_project(project_id)
    
    st.subheader(project.get("title", "Sans titre"))
    
    # Affichage des sections existantes
    sections = project.get("sections", [])
    
    if sections:
        st.write("Structure actuelle du document:")
        
        for i, section in enumerate(sections):
            with st.expander(f"{i+1}. {section.get('title', 'Sans titre')}"):
                st.write(section.get("content", ""))
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("√âditer", key=f"edit_{section.get('section_id', '')}"):
                        st.session_state.current_section_id = section.get("section_id", "")
                        st.session_state.page = "redaction"
                        st.rerun()
                
                with col2:
                    if st.button("Supprimer", key=f"delete_{section.get('section_id', '')}"):
                        if project_context.delete_section(project_id, section.get("section_id", "")):
                            # Mise √† jour des m√©tadonn√©es
                            project_context.update_project_metadata(project_id)
                            
                            # Sauvegarde de la version dans l'historique
                            project_data = project_context.load_project(project_id)
                            history_manager.save_version(
                                project_id=project_id,
                                project_data=project_data,
                                description=f"Suppression de la section: {section.get('title', 'Sans titre')}"
                            )
                            
                            st.success("Section supprim√©e avec succ√®s!")
                            st.rerun()
                        else:
                            st.error("Erreur lors de la suppression de la section.")
    
    # Formulaire d'ajout de section
    st.markdown("---")
    st.subheader("Ajouter une nouvelle section")
    
    with st.form("add_section_form"):
        title = st.text_input("Titre de la section")
        
        # Options pour la g√©n√©ration de contenu
        generate_content = st.checkbox("G√©n√©rer un contenu initial")
        
        if generate_content:
            content_prompt = st.text_area(
                "Description du contenu √† g√©n√©rer",
                placeholder="D√©crivez le contenu que vous souhaitez g√©n√©rer pour cette section..."
            )
            
            style = st.selectbox(
                "Style d'√©criture",
                ["Standard", "Acad√©mique", "CR√âSUS-NAKAMOTO", "AcademicWritingCrypto"],
                index=["Standard", "Acad√©mique", "CR√âSUS-NAKAMOTO", "AcademicWritingCrypto"].index(
                    project.get("preferences", {}).get("style", "Standard")
                )
            )
            
            length = st.slider(
                "Longueur approximative (mots)",
                min_value=100,
                max_value=1000,
                value=300,
                step=100
            )
        
        submitted = st.form_submit_button("Ajouter la section")
        
        if submitted:
            if not title:
                st.error("Le titre est obligatoire.")
            else:
                content = ""
                
                # G√©n√©ration du contenu si demand√©
                if generate_content and content_prompt:
                    with st.spinner("G√©n√©ration du contenu en cours..."):
                        result = generate_academic_text(
                            prompt=content_prompt,
                            style=style,
                            length=length
                        )
                        
                        content = result.get("text", "")
                
                # Ajout de la section
                section_id = project_context.add_section(
                    project_id=project_id,
                    title=title,
                    content=content
                )
                
                # Mise √† jour des m√©tadonn√©es
                project_context.update_project_metadata(project_id)
                
                # Mise √† jour du statut du projet
                if project.get("status") == "created":
                    project_context.update_project_status(project_id, "storyboard_ready")
                
                # Sauvegarde de la version dans l'historique
                project_data = project_context.load_project(project_id)
                history_manager.save_version(
                    project_id=project_id,
                    project_data=project_data,
                    description=f"Ajout de la section: {title}"
                )
                
                st.success("Section ajout√©e avec succ√®s!")
                st.rerun()
    
    # R√©organisation des sections
    if sections:
        st.markdown("---")
        st.subheader("R√©organiser les sections")
        
        st.write("Faites glisser les sections pour les r√©organiser:")
        
        # Simulation d'interface de r√©organisation
        section_titles = [section.get("title", "Sans titre") for section in sections]
        
        # Dans une vraie impl√©mentation, on utiliserait une biblioth√®que de drag-and-drop
        # Pour cette d√©monstration, on utilise une liste de s√©lection
        selected_indices = []
        for i, title in enumerate(section_titles):
            if st.checkbox(f"{i+1}. {title}", key=f"reorder_{i}"):
                selected_indices.append(i)
        
        new_order = st.selectbox(
            "Nouvelle position pour les sections s√©lectionn√©es",
            range(1, len(sections) + 1)
        )
        
        if st.button("Appliquer la r√©organisation") and selected_indices:
            st.info("Fonctionnalit√© de r√©organisation √† impl√©menter.")
            # Dans une vraie impl√©mentation, on r√©organiserait les sections ici
    
    # Suggestions du moteur adaptatif
    st.markdown("---")
    st.subheader("Suggestions pour votre storyboard")
    
    # Suggestions bas√©es sur le type de projet
    project_type = project.get("type", "Article acad√©mique")
    
    if project_type == "Article acad√©mique":
        st.info("""
        üí° **Structure recommand√©e pour un article acad√©mique:**
        
        1. Introduction (contexte, probl√©matique, plan)
        2. Revue de litt√©rature / Cadre th√©orique
        3. M√©thodologie
        4. R√©sultats
        5. Discussion
        6. Conclusion
        """)
    
    elif project_type == "M√©moire" or project_type == "Th√®se":
        st.info("""
        üí° **Structure recommand√©e pour un m√©moire/th√®se:**
        
        1. Introduction g√©n√©rale
        2. Revue de litt√©rature
        3. Cadre th√©orique
        4. M√©thodologie
        5. R√©sultats (plusieurs chapitres possibles)
        6. Discussion
        7. Conclusion g√©n√©rale
        """)
    
    # Bouton pour terminer le storyboard
    st.markdown("---")
    
    if st.button("Terminer le storyboard"):
        # Mise √† jour du statut du projet
        project_context.update_project_status(project_id, "storyboard_ready")
        
        # Sauvegarde de la version dans l'historique
        project_data = project_context.load_project(project_id)
        history_manager.save_version(
            project_id=project_id,
            project_data=project_data,
            description="Storyboard termin√©"
        )
        
        st.success("Storyboard termin√© avec succ√®s! Vous pouvez maintenant passer √† la phase de r√©daction.")
        
        # Redirection vers la page du projet
        st.session_state.page = "project_overview"
        st.rerun()
