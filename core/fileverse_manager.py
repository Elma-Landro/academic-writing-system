
"""
Gestionnaire d'int√©gration Fileverse pour la s√©dimentation acad√©mique.
Permet l'utilisation du traitement de texte int√©gr√© pour alimenter les √©tapes successives.
"""

import streamlit as st
import requests
import json
from typing import Dict, Any, List, Optional
from datetime import datetime
from dataclasses import dataclass

@dataclass
class FileversePadData:
    """Structure pour les donn√©es d'un pad Fileverse."""
    pad_id: str
    title: str
    content: str
    collaborators: List[str]
    last_modified: str
    section_type: str = "intermediate"  # intermediate, draft, final
    sedimentation_phase: str = "storyboard"  # storyboard, redaction, revision, finalisation

class FileVerseManager:
    """
    Gestionnaire d'int√©gration avec Fileverse pour la cr√©ation collaborative
    et l'alimentation de la s√©dimentation acad√©mique.
    """
    
    def __init__(self, api_key: Optional[str] = None):
        """
        Initialise le gestionnaire Fileverse.
        
        Args:
            api_key: Cl√© API Fileverse (optionnelle, r√©cup√©r√©e des secrets)
        """
        self.api_key = api_key or st.secrets.get("FILEVERSE_API_KEY", "")
        self.base_url = "https://api.fileverse.io/v1"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        } if self.api_key else {}
        
        # Cache local des pads pour optimiser les performances
        self.pads_cache = {}
    
    def is_available(self) -> bool:
        """V√©rifie si l'int√©gration Fileverse est disponible."""
        return bool(self.api_key)
    
    def create_sedimentation_pad(self, project_id: str, section_title: str, 
                               phase: str, initial_content: str = "") -> Optional[Dict]:
        """
        Cr√©e un pad Fileverse pour une section sp√©cifique d'un projet.
        
        Args:
            project_id: ID du projet
            section_title: Titre de la section
            phase: Phase de s√©dimentation (storyboard, redaction, etc.)
            initial_content: Contenu initial du pad
            
        Returns:
            Donn√©es du pad cr√©√© ou None en cas d'erreur
        """
        if not self.is_available():
            st.warning("üîë Int√©gration Fileverse non configur√©e (cl√© API manquante)")
            return None
        
        try:
            pad_data = {
                "title": f"[{phase.upper()}] {section_title} - Projet {project_id}",
                "content": initial_content or f"# {section_title}\n\n<!-- Phase: {phase} -->\n\n",
                "isPublic": False,
                "metadata": {
                    "project_id": project_id,
                    "section_title": section_title,
                    "sedimentation_phase": phase,
                    "creation_type": "academic_sedimentation"
                }
            }
            
            response = requests.post(
                f"{self.base_url}/pads",
                headers=self.headers,
                json=pad_data,
                timeout=10
            )
            
            if response.status_code == 201:
                pad_info = response.json()
                
                # Cache du pad cr√©√©
                self.pads_cache[pad_info["id"]] = FileversePadData(
                    pad_id=pad_info["id"],
                    title=pad_data["title"],
                    content=pad_data["content"],
                    collaborators=[],
                    last_modified=datetime.now().isoformat(),
                    sedimentation_phase=phase
                )
                
                return pad_info
            else:
                st.error(f"Erreur Fileverse: {response.status_code}")
                return None
                
        except Exception as e:
            st.error(f"Erreur lors de la cr√©ation du pad Fileverse: {str(e)}")
            return None
    
    def get_pad_content(self, pad_id: str) -> Optional[str]:
        """
        R√©cup√®re le contenu d'un pad Fileverse.
        
        Args:
            pad_id: ID du pad
            
        Returns:
            Contenu du pad ou None
        """
        if not self.is_available():
            return None
        
        try:
            response = requests.get(
                f"{self.base_url}/pads/{pad_id}",
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                pad_data = response.json()
                return pad_data.get("content", "")
            else:
                return None
                
        except Exception as e:
            st.error(f"Erreur lors de la r√©cup√©ration du pad: {str(e)}")
            return None
    
    def update_pad_content(self, pad_id: str, content: str) -> bool:
        """
        Met √† jour le contenu d'un pad Fileverse.
        
        Args:
            pad_id: ID du pad
            content: Nouveau contenu
            
        Returns:
            True si la mise √† jour a r√©ussi
        """
        if not self.is_available():
            return False
        
        try:
            response = requests.patch(
                f"{self.base_url}/pads/{pad_id}",
                headers=self.headers,
                json={"content": content},
                timeout=10
            )
            
            return response.status_code == 200
            
        except Exception as e:
            st.error(f"Erreur lors de la mise √† jour du pad: {str(e)}")
            return False
    
    def sync_with_sedimentation(self, project_id: str, sedimentation_manager) -> Dict[str, Any]:
        """
        Synchronise les pads Fileverse avec les donn√©es de s√©dimentation.
        
        Args:
            project_id: ID du projet
            sedimentation_manager: Instance du gestionnaire de s√©dimentation
            
        Returns:
            Rapport de synchronisation
        """
        if not self.is_available():
            return {"status": "unavailable", "message": "Fileverse non configur√©"}
        
        context = sedimentation_manager.get_sedimentation_context(project_id)
        sync_report = {
            "status": "success",
            "synced_sections": 0,
            "created_pads": 0,
            "updated_pads": 0,
            "errors": []
        }
        
        for section in context.sections:
            try:
                # Recherche d'un pad existant pour cette section
                existing_pad = self._find_section_pad(project_id, section.section_id, context.current_phase.value)
                
                if existing_pad:
                    # Mise √† jour du pad existant avec les donn√©es de s√©dimentation
                    enhanced_content = self._enhance_content_with_sedimentation(
                        section, context.current_phase.value
                    )
                    
                    if self.update_pad_content(existing_pad["id"], enhanced_content):
                        sync_report["updated_pads"] += 1
                    else:
                        sync_report["errors"].append(f"√âchec mise √† jour pad {section.title}")
                else:
                    # Cr√©ation d'un nouveau pad
                    initial_content = self._generate_pad_template(section, context.current_phase.value)
                    
                    pad_info = self.create_sedimentation_pad(
                        project_id=project_id,
                        section_title=section.title,
                        phase=context.current_phase.value,
                        initial_content=initial_content
                    )
                    
                    if pad_info:
                        sync_report["created_pads"] += 1
                        
                        # Mise √† jour de la section avec l'ID du pad
                        section.metadata = section.metadata or {}
                        section.metadata["fileverse_pad_id"] = pad_info["id"]
                        section.metadata["fileverse_url"] = pad_info.get("url", "")
                
                sync_report["synced_sections"] += 1
                
            except Exception as e:
                sync_report["errors"].append(f"Erreur section {section.title}: {str(e)}")
        
        # Sauvegarde du contexte mis √† jour
        sedimentation_manager.save_sedimentation_context(context)
        
        return sync_report
    
    def create_collaborative_workspace(self, project_id: str, project_title: str, 
                                     collaborators: List[str] = None) -> Optional[Dict]:
        """
        Cr√©e un espace de travail collaboratif Fileverse pour un projet complet.
        
        Args:
            project_id: ID du projet
            project_title: Titre du projet
            collaborators: Liste des emails des collaborateurs
            
        Returns:
            Informations sur l'espace de travail cr√©√©
        """
        if not self.is_available():
            return None
        
        try:
            workspace_data = {
                "name": f"Espace Acad√©mique - {project_title}",
                "description": f"Espace collaboratif pour le projet acad√©mique: {project_title}",
                "isPublic": False,
                "metadata": {
                    "project_id": project_id,
                    "type": "academic_workspace",
                    "sedimentation_enabled": True
                }
            }
            
            if collaborators:
                workspace_data["collaborators"] = collaborators
            
            response = requests.post(
                f"{self.base_url}/workspaces",
                headers=self.headers,
                json=workspace_data,
                timeout=15
            )
            
            if response.status_code == 201:
                return response.json()
            else:
                st.error(f"Erreur cr√©ation workspace Fileverse: {response.status_code}")
                return None
                
        except Exception as e:
            st.error(f"Erreur lors de la cr√©ation de l'espace de travail: {str(e)}")
            return None
    
    def extract_sedimentation_insights(self, pad_id: str) -> Dict[str, Any]:
        """
        Extrait les insights de s√©dimentation depuis un pad Fileverse.
        
        Args:
            pad_id: ID du pad
            
        Returns:
            Insights extraits (th√®ses, citations, m√©tadonn√©es)
        """
        content = self.get_pad_content(pad_id)
        if not content:
            return {}
        
        insights = {
            "theses": [],
            "citations": [],
            "keywords": [],
            "structure_notes": [],
            "collaboration_notes": []
        }
        
        lines = content.split('\n')
        
        for line in lines:
            line = line.strip()
            
            # Extraction des th√®ses (lignes commen√ßant par **Th√®se** ou similaire)
            if line.startswith('**Th√®se') or line.startswith('## Th√®se'):
                insights["theses"].append(line.replace('**', '').replace('##', '').strip())
            
            # Extraction des citations (format markdown ou acad√©mique)
            elif '[' in line and ']' in line and ('http' in line or 'doi:' in line):
                insights["citations"].append(line.strip())
            
            # Extraction des mots-cl√©s (lignes avec #tags)
            elif line.startswith('#') and not line.startswith('##'):
                insights["keywords"].extend([tag.strip() for tag in line.split('#') if tag.strip()])
            
            # Notes structurelles (commentaires HTML)
            elif line.startswith('<!-- ') and line.endswith(' -->'):
                note = line.replace('<!--', '').replace('-->', '').strip()
                insights["structure_notes"].append(note)
        
        return insights
    
    def _find_section_pad(self, project_id: str, section_id: str, phase: str) -> Optional[Dict]:
        """Recherche un pad existant pour une section donn√©e."""
        # Simulation - en production, impl√©menter la recherche via l'API Fileverse
        return None
    
    def _enhance_content_with_sedimentation(self, section, phase: str) -> str:
        """
        Enrichit le contenu d'un pad avec les donn√©es de s√©dimentation.
        
        Args:
            section: Section de s√©dimentation
            phase: Phase actuelle
            
        Returns:
            Contenu enrichi
        """
        content = f"# {section.title}\n\n"
        content += f"<!-- Phase: {phase} | Section ID: {section.section_id} -->\n\n"
        
        if section.description:
            content += f"## Description\n{section.description}\n\n"
        
        if section.theses:
            content += "## Th√®ses identifi√©es\n\n"
            for i, thesis in enumerate(section.theses, 1):
                content += f"**Th√®se {i}:** {thesis}\n\n"
        
        if section.citations:
            content += "## Citations sugg√©r√©es\n\n"
            for citation in section.citations:
                content += f"- {citation}\n"
            content += "\n"
        
        if section.content:
            content += "## Contenu existant\n\n"
            content += section.content + "\n\n"
        
        # Zone de travail collaboratif
        content += "---\n\n"
        content += "## Zone de travail collaboratif\n\n"
        content += "*Utilisez cet espace pour d√©velopper, annoter et enrichir le contenu...*\n\n"
        
        return content
    
    def _generate_pad_template(self, section, phase: str) -> str:
        """G√©n√®re un template de pad selon la phase de s√©dimentation."""
        if phase == "storyboard":
            return f"""# {section.title}

<!-- Phase: Storyboard | Section ID: {section.section_id} -->

## Objectifs de la section
- [ ] D√©finir les th√®ses principales
- [ ] Identifier les sources cl√©s
- [ ] Structurer l'argumentation

## Brainstorming collaboratif
*Ajoutez vos id√©es, r√©f√©rences et notes ici...*

## Structure propos√©e
1. Introduction
2. D√©veloppement
3. Conclusion

---
*Espace de travail collaboratif - Modifiez librement*
"""
        
        elif phase == "redaction":
            return f"""# {section.title}

<!-- Phase: R√©daction | Section ID: {section.section_id} -->

## Contenu principal

### Introduction
*R√©digez l'introduction de la section...*

### D√©veloppement
*D√©veloppez les arguments principaux...*

### Conclusion
*Concluez la section...*

## Notes de r√©daction
- [ ] V√©rifier la coh√©rence avec les autres sections
- [ ] Int√©grer les citations appropri√©es
- [ ] R√©viser le style et la clart√©

---
*Espace de collaboration - Commentaires et suggestions*
"""
        
        elif phase == "revision":
            return f"""# {section.title} - R√©vision

<!-- Phase: R√©vision | Section ID: {section.section_id} -->

## Contenu en r√©vision
{section.content if section.content else "*Contenu √† r√©viser...*"}

## Points de r√©vision
- [ ] Clart√© des arguments
- [ ] Coh√©rence stylistique  
- [ ] Exactitude des citations
- [ ] Fluidit√© des transitions

## Commentaires collaboratifs
*Ajoutez vos commentaires et suggestions d'am√©lioration...*

---
*Zone de r√©vision collaborative*
"""
        
        else:  # finalisation
            return f"""# {section.title} - Finalisation

<!-- Phase: Finalisation | Section ID: {section.section_id} -->

## Version finale
{section.content if section.content else "*Version finale √† valider...*"}

## Checklist de finalisation
- [ ] Mise en forme finale
- [ ] V√©rification des r√©f√©rences
- [ ] Coh√©rence avec l'ensemble du document
- [ ] Validation collaborative

## Approbations
- [ ] Auteur principal
- [ ] Collaborateurs
- [ ] Relecteurs

---
*Document pr√™t pour export*
"""

def render_fileverse_integration(project_id: str, sedimentation_manager, fileverse_manager: FileVerseManager):
    """
    Interface d'int√©gration Fileverse dans l'application Streamlit.
    
    Args:
        project_id: ID du projet
        sedimentation_manager: Gestionnaire de s√©dimentation
        fileverse_manager: Gestionnaire Fileverse
    """
    st.markdown("### üìù Int√©gration Fileverse - Traitement de texte collaboratif")
    
    if not fileverse_manager.is_available():
        st.warning("""
        üîë **Int√©gration Fileverse non configur√©e**
        
        L'int√©gration Fileverse permet d'utiliser un traitement de texte collaboratif 
        pour alimenter la s√©dimentation entre les √©tapes du processus acad√©mique.
        
        Pour activer cette fonctionnalit√©, configurez votre cl√© API Fileverse.
        """)
        return
    
    # Statut de l'int√©gration
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üîó Statut", "Connect√©", delta=None)
    
    with col2:
        context = sedimentation_manager.get_sedimentation_context(project_id)
        pads_count = sum(1 for s in context.sections if s.metadata and s.metadata.get("fileverse_pad_id"))
        st.metric("üìÑ Pads actifs", pads_count)
    
    with col3:
        st.metric("üë• Phase", context.current_phase.value.title())
    
    # Actions principales
    st.markdown("#### Actions disponibles")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîÑ Synchroniser avec Fileverse", key="sync_fileverse"):
            with st.spinner("Synchronisation en cours..."):
                sync_report = fileverse_manager.sync_with_sedimentation(project_id, sedimentation_manager)
                
                if sync_report["status"] == "success":
                    st.success(f"""
                    ‚úÖ **Synchronisation r√©ussie !**
                    
                    - Sections synchronis√©es: {sync_report['synced_sections']}
                    - Pads cr√©√©s: {sync_report['created_pads']}
                    - Pads mis √† jour: {sync_report['updated_pads']}
                    """)
                    
                    if sync_report["errors"]:
                        st.warning("‚ö†Ô∏è Quelques erreurs: " + "; ".join(sync_report["errors"]))
                else:
                    st.error(f"‚ùå Erreur de synchronisation: {sync_report.get('message', 'Erreur inconnue')}")
    
    with col2:
        if st.button("üìã Cr√©er espace collaboratif", key="create_workspace"):
            project = sedimentation_manager.project_context.load_project(project_id)
            
            with st.spinner("Cr√©ation de l'espace collaboratif..."):
                workspace = fileverse_manager.create_collaborative_workspace(
                    project_id=project_id,
                    project_title=project.get("title", "Projet acad√©mique")
                )
                
                if workspace:
                    st.success(f"üéâ Espace collaboratif cr√©√© ! ID: {workspace.get('id', 'N/A')}")
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation de l'espace collaboratif")
    
    with col3:
        if st.button("üìä Extraire insights", key="extract_insights"):
            with st.spinner("Extraction des insights..."):
                insights_summary = {"total_theses": 0, "total_citations": 0, "total_keywords": 0}
                
                for section in context.sections:
                    if section.metadata and section.metadata.get("fileverse_pad_id"):
                        pad_insights = fileverse_manager.extract_sedimentation_insights(
                            section.metadata["fileverse_pad_id"]
                        )
                        insights_summary["total_theses"] += len(pad_insights.get("theses", []))
                        insights_summary["total_citations"] += len(pad_insights.get("citations", []))
                        insights_summary["total_keywords"] += len(pad_insights.get("keywords", []))
                
                st.success(f"""
                üìà **Insights extraits des pads Fileverse:**
                
                - Th√®ses identifi√©es: {insights_summary['total_theses']}
                - Citations collect√©es: {insights_summary['total_citations']}
                - Mots-cl√©s: {insights_summary['total_keywords']}
                """)
    
    # Liste des pads actifs
    if context.sections:
        st.markdown("#### üìÑ Pads Fileverse actifs")
        
        for section in context.sections:
            if section.metadata and section.metadata.get("fileverse_pad_id"):
                with st.expander(f"üìù {section.title}", expanded=False):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**ID du pad:** `{section.metadata['fileverse_pad_id']}`")
                        st.write(f"**Phase:** {context.current_phase.value}")
                        
                        if section.metadata.get("fileverse_url"):
                            st.markdown(f"[üîó Ouvrir dans Fileverse]({section.metadata['fileverse_url']})")
                    
                    with col2:
                        if st.button("üîÑ R√©cup√©rer contenu", key=f"fetch_{section.section_id}"):
                            content = fileverse_manager.get_pad_content(section.metadata["fileverse_pad_id"])
                            if content:
                                # Mise √† jour de la section avec le contenu Fileverse
                                sedimentation_manager.update_section(
                                    project_id=project_id,
                                    section_id=section.section_id,
                                    content=content
                                )
                                st.success("‚úÖ Contenu synchronis√© depuis Fileverse!")
                                st.rerun()
    
    # Guide d'utilisation
    with st.expander("üí° Guide d'utilisation de l'int√©gration Fileverse", expanded=False):
        st.markdown("""
        ### üöÄ Comment utiliser Fileverse pour la s√©dimentation acad√©mique
        
        **1. Synchronisation automatique**
        - Cliquez sur "Synchroniser avec Fileverse" pour cr√©er/mettre √† jour les pads
        - Chaque section de votre projet aura son pad collaboratif
        - Les donn√©es de s√©dimentation sont automatiquement int√©gr√©es
        
        **2. Travail collaboratif**
        - Invitez des collaborateurs sur vos pads Fileverse
        - Travaillez ensemble en temps r√©el sur chaque section
        - Les modifications sont sauvegard√©es automatiquement
        
        **3. Alimentation de la s√©dimentation**
        - Le contenu cr√©√© dans Fileverse nourrit automatiquement les √©tapes suivantes
        - Les th√®ses, citations et notes sont extraites intelligemment
        - La progression entre phases est enrichie par le travail collaboratif
        
        **4. Phases d'utilisation**
        - **Storyboard:** Brainstorming et structuration collaborative
        - **R√©daction:** √âcriture collaborative avec templates guid√©s
        - **R√©vision:** Commentaires et am√©liorations en √©quipe
        - **Finalisation:** Validation collaborative et mise en forme finale
        """)
